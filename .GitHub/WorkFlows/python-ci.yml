name: GuardianAI Continuous Integration

# This workflow runs on pushes to the main branch or any pull request targeting main.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    # Use a matrix strategy to test on different OS and Python versions.
    strategy:
      fail-fast: false # Don't cancel all jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up the specific Python version from the matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # Cache pip dependencies to speed up future runs

      # 3. Install all project dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      # 4. Lint code with Ruff and check formatting with Black
      - name: Lint with Ruff and Black
        run: |
          ruff .
          black --check .

      # 5. Run tests with pytest and generate coverage report
      # The src/guardian_ai path ensures we only measure coverage of our package.
      - name: Test with Pytest
        run: |
          pytest --cov=src/guardian_ai --cov-report=xml

      # 6. (Optional) Upload coverage report to Codecov
      # This step provides visibility into test coverage in pull requests.
      # Requires setting up a free Codecov account and adding a CODECOV_TOKEN secret to your GitHub repo.
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: YourGitHubUsername/GuardianAI # Replace with your repo slug